<?xml version="1.0"?>

<ruleset name="Nabla Rules">
  <description>
The Naming Ruleset contains a collection of rules about names - too long, too short, and so forth.
  </description>

  <!-- Naming -->

  <rule name="LongVariable"
        message="Avoid excessively long variable names"
        class="net.sourceforge.pmd.rules.XPathRule">
    <description>
Detects when a field, formal or local variable is declared with a big name.
    </description>
      <priority>3</priority>
      <properties>
          <property name="xpath">
              <value>
                  <![CDATA[
    //VariableDeclaratorId[string-length(@Image) > 80]
                  ]]>
              </value>
          </property>
      </properties>
    <example>
<![CDATA[
public class Something {
  int reallyLongIntName = -3;  // VIOLATION - Field

  public static void main( String argumentsList[] ) { // VIOLATION - Formal
    int otherReallyLongName = -5; // VIOLATION - Local

    for (int interestingIntIndex = 0;  // VIOLATION - For
             interestingIntIndex < 10;
             interestingIntIndex ++ ) {

    }
}

]]>
    </example>
  </rule>

  <rule name="ShortMethodNameRule"
        message="Avoid using short method names"
        class="net.sourceforge.pmd.rules.XPathRule">
     <description>
Detects when very short method names are used.
     </description>
      <priority>3</priority>
      <properties>
          <property name="xpath">
              <value>
                  <![CDATA[
    //MethodDeclarator[string-length(@Image) < 3]
                  ]]>
              </value>
          </property>
      </properties>
     <example>
<![CDATA[
public class ShortMethod {
  public void a( int i ) { // Violation
  }
}
]]>
     </example>
  </rule>


  <!-- Codesize -->

 <rule name="ExcessiveMethodLength"
       message="Avoid really long methods."
       class="net.sourceforge.pmd.rules.design.LongMethodRule">
   <description>
Excessive Method Length usually means that the method is doing
too much.  There is usually quite a bit of Cut and Paste there
as well.  Try to reduce the method size by creating helper methods,
and removing cut and paste.

Default value is 2.5 sigma greater than the mean.

NOTE:  In version 0.9 and higher, their are three parameters available:
minimum - Minimum Length before reporting.
sigma - Std Deviations away from the mean before reporting.
topscore - The Maximum Number of reports to generate.

At this time, only one can be used at a time.

   </description>
     <priority>3</priority>
   <properties>
    <property name="minimum" value="100"/>
   </properties>
   <example>
<![CDATA[
public void doSomething() {
  System.out.println("I am a fish.");
  System.out.println("I am a fish.");
  System.out.println("I am a fish.");
  System.out.println("I am a fish.");
  System.out.println("I am a fish.");
  // 495 copies omitted for brevity.
}
]]>
   </example>

 </rule>

<rule name="ExcessiveClassLength"
       message="Avoid really long Classes."
       class="net.sourceforge.pmd.rules.design.LongClassRule">
   <description>
Long Class files are indications that the class may be trying to
do too much.  Try to break it down, and reduce the size to something
managable.

Default value is 2.5 sigma greater than the mean.

NOTE:  In version 0.9 and higher, their are three parameters available:
minimum - Minimum Length before reporting.
sigma - Std Deviations away from the mean before reporting.
topscore - The Maximum Number of reports to generate.

At this time, only one can be used at a time.

   </description>
     <priority>3</priority>
   <properties>
    <property name="minimum" value="1000"/>
   </properties>
   <example>
<![CDATA[
public class Foo {
  public void bar() {
    // 500 lines of code
  }

  public void baz() {
    // 500 more lines of code
  }
}
]]>
   </example>
 </rule>



     <rule name="CyclomaticComplexityRule"
      message = "The {0} ''{1}'' has a Cyclomatic Complexity of {2}."
      class="net.sourceforge.pmd.rules.CyclomaticComplexityRule">
   <description>
Complexity is determined by the number of decision points in a method plus one for the
method entry.  The decision points are 'if', 'while', 'for', and 'case labels'.  Scale:
1-4 (low complexity)   5-7 (moderate complexity)   8-10 (high complexity)   10+ (very high complexity)
   </description>
   <priority>3</priority>
   <properties>
      <property name="reportLevel" value="10"/>
   </properties>
   <example>
<![CDATA[
Cyclomatic Complexity = 12

public class Foo
{
1   public void example()
    {
2       if (a == b)
        {
3           if (a1 == b1)
            {
                do something;
            }
4           else if a2 == b2)
            {
                do something;
            }
            else
            {
                do something;
            }
        }
5       else if (c == d)
        {
6           while (c == d)
            {
                do something;
            }
        }
7       else if (e == f)
        {
8           for (int n = 0; n < h; n++)
            {
                do something;
            }
        }
        else
        {
            switch (z)
            {
9               case 1:
                    do something;
                    break;

10              case 2:
                    do something;
                    break;

11              case 3:
                    do something;
                    break;

12              default:
                    do something;
                    break;
            }
        }
    }
}
]]>
   </example>
</rule>

    <rule name="ExcessivePublicCountRule"
    message="A high number of public methods and attributes in an object can indicate the class may need to be broken up for exhaustive testing may prove difficult."
    class="net.sourceforge.pmd.rules.ExcessivePublicCountRule">
    <description>
    A large amount of public methods and attributes declared in an object can indicate the class may need
    to be broken up as increased effort will be required to thoroughly test such a class.
    </description>
    <priority>3</priority>
    <properties>
    <property name="minimum" value="45"/>
    </properties>
    <example>
    <![CDATA[

    public class Foo {
    public String value;
    public Bar something;
    public Variable var;
    //more public attributes
    public void doWork() {}
    public void doMoreWork() {}
    public void doWorkAgain() {}
    public void doWorking() {}
    public void doWorkIt() {}
    public void doWorkingAgain() {}
    public void doWorkAgainAgain() {}
    public void doWorked() {}

    }
    ]]>
    </example>
    </rule>


    <!-- Basic -->

    <rule name="EmptySwitchStatements"
          message="Avoid empty switch statements"
          class="net.sourceforge.pmd.rules.XPathRule">
      <description>
      Avoid empty switch statements.
      </description>
      <properties>
          <property name="xpath">
              <value>
                  <![CDATA[
    //SwitchStatement[count(*) = 1]
                  ]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
  <![CDATA[
  public class Foo {
   public void bar() {
    int x = 2;
    switch (x) {
     // once there was code here
     // but it's been commented out or something
    }
   }
  }
  ]]>
      </example>
      </rule>


    <rule name="JumbledIncrementer"
         message="Avoid using an outer loop incrementer in an inner loop for update expression"
         class="net.sourceforge.pmd.rules.XPathRule">
     <description>
     Avoid jumbled loop incrementers - it's usually a mistake, and it's confusing even if it's what's intended.
     </description>
     <properties>
         <property name="xpath">
             <value>
                 <![CDATA[
    //ForStatement[ForUpdate//Name/@Image = ancestor::ForStatement/ForInit//VariableDeclaratorId/@Image]
                 ]]>
             </value>
         </property>
     </properties>
        <priority>3</priority>

     <example>
 <![CDATA[
 public class JumbledIncrementerRule1 {
  public void foo() {
   for (int i = 0; i < 10; i++) {
    for (int k = 0; k < 20; i++) {
     System.out.println("Hello");
    }
   }
  }
 }}]]>
     </example>
     </rule>

    <rule name="ForLoopShouldBeWhileLoop"
          message="This for loop could be simplified to a while loop"
          class="net.sourceforge.pmd.rules.XPathRule">
      <description>
      Some for loops can be simplified to while loops - this makes them more concise.
      </description>
    <properties>
        <property name="xpath">
            <value>
                <![CDATA[
    //ForStatement[count(*) > 1][not(ForInit)][not(ForUpdate)]
                ]]>
            </value>
        </property>
    </properties>
        <priority>3</priority>
      <example>
  <![CDATA[
  public class Foo {
      void bar() {
          for (;true;) true; // No Init or Update part, may as well be: while (true)
      }
  }
  ]]>
      </example>
    </rule>


    <rule name="UnnecessaryConversionTemporaryRule"
          message="Avoid unnecessary temporaries when converting primitives to Strings"
          class="net.sourceforge.pmd.rules.UnnecessaryConversionTemporaryRule">
      <description>
      Avoid unnecessary temporaries when converting primitives to Strings
      </description>
        <priority>3</priority>
      <example>
  <![CDATA[
    public String convert(int x) {
      // this wastes an object
      String foo = new Integer(x).toString();
      // this is better
      return Integer.toString(x);
    }
  ]]>
      </example>
    </rule>


           <!-- Unusedcode -->

  <rule name="UnusedPrivateField"
        message="Avoid unused private fields such as ''{0}''"
        class="net.sourceforge.pmd.rules.UnusedPrivateFieldRule">
    <description>
Unused Private Field detects when a private field is declared
that is not used by the class.
    </description>
      <priority>3</priority>
    <example>
<![CDATA[
public class Something {
  private static int FOO = 2; // Unused
  private int i = 5; // Unused
  private int j = 6;

  public int addOne() {
    return j++;
  }
}
]]>
    </example>
  </rule>

<rule name="UnusedLocalVariable"
        message="Avoid unused local variables such as ''{0}''"
        class="net.sourceforge.pmd.rules.UnusedLocalVariableRule">
    <description>
Unused Local Variables detects when a variable is declared, but not
used (except for possibly initial assignment)
    </description>
    <priority>3</priority>

    <example>
<![CDATA[
public int doSomething() {
  int i = 5; // Unused
  int j = 6;
  j += 3;
  return j;
}
]]>
    </example>
  </rule>



    <rule name="UnusedPrivateMethod"
        message="Avoid unused private methods such as ''{0}''"
        class="net.sourceforge.pmd.rules.UnusedPrivateMethodRule">
    <description>
Unused Private Method detects when a private method is declared but is unused.
    </description>
        <priority>3</priority>
    <example>
<![CDATA[
public class Something {
 private void foo() {} // unused
}
]]>
    </example>
  </rule>


  <rule name="UnusedFormalParameter"
        message="Avoid unused formal parameters such as ''{0}''"
        class="net.sourceforge.pmd.rules.UnusedFormalParameterRule">
    <description>
Avoid passing parameters to methods and then not using those parameters.
    </description>
      <priority>3</priority>

    <example>
<![CDATA[
public class Foo {
 private void bar(String howdy) {
  // howdy is not used
 }
]]>
    </example>
  </rule>


         <!-- Design -->



  <rule name="LooseCouplingRule"
        message="Avoid using implementation types like ''{0}''; use the interface instead"
        class="net.sourceforge.pmd.rules.design.LooseCouplingRule">
    <description>
    Avoid using implementation types (i.e., HashSet); use the interface (i.e, Set) instead
    </description>
      <priority>3</priority>

    <example>
<![CDATA[
import java.util.*;
public class Bar {

 // should be "private List list"
 private ArrayList list = new ArrayList();

 // should be "public Set getFoo()"
 public HashSet getFoo() {
  return new HashSet();
 }
}

]]>
    </example>
  </rule>



    <rule name="AvoidReassigningParametersRule"
        message="Avoid reassigning parameters such as ''{0}''"
        class="net.sourceforge.pmd.rules.AvoidReassigningParametersRule">
    <description>
Reassigning values to parameters is a questionable practice.  Use a temporary local variable instead.
    </description>
        <priority>2</priority>
    <example>
<![CDATA[
public class Foo {
 private void foo(String bar) {
  bar = "something else";
 }
}
]]>
    </example>
  </rule>

    <rule name="SwitchDensity"
          message="A high ratio of statements to labels in a switch statement.  Consider refactoring."
          class="net.sourceforge.pmd.rules.design.SwitchDensityRule">
      <description>
 A high ratio of statements to labels in a switch statement implies that the switch
 statement is doing too much work.  Consider moving the statements either into new
 methods, or creating subclasses based on the switch variable.
      </description>
        <priority>3</priority>
        <properties>
         <property name="minimum" value="5"/>
        </properties>
      <example>
 <![CDATA[
   public class Foo {
     private int x;
     public void bar() {
       switch (x) {
         case 1: {
           System.out.println("I am a fish.");
           System.out.println("I am a fish.");
           System.out.println("I am a fish.");
           System.out.println("I am a fish.");
           break;
         }

         case 2: {
           System.out.println("I am a cow.");
           System.out.println("I am a cow.");
           System.out.println("I am a cow.");
           System.out.println("I am a cow.");
           break;
         }
       }
     }
   }
 ]]>
      </example>
    </rule>

    <rule name="ConstructorCallsOverridableMethodRule"
          message="Avoid calls to overridable methods during construction"
          class="net.sourceforge.pmd.rules.ConstructorCallsOverridableMethodRule">
      <description>
      Calling overridable methods during construction poses a risk of invoking methods on an
          incompletely constructed object.  This situation can be difficult to discern.
      It may leave the sub-class unable to construct its superclass or forced to
          replicate the construction process completely within itself, losing the ability to call
      super().  If the default constructor contains a call to an overridable method,
          the subclass may be completely uninstantiable.
      </description>
        <priority>1</priority>
      <example>
  <![CDATA[
    public class SeniorClass {
      public SeniorClass(){
          toString(); //may throw NullPointerException if overridden
      }
      public String toString(){
        return "IAmSeniorClass";
      }
    }
    public class JuniorClass extends SeniorClass {
      private String name;
      public JuniorClass(){
        super(); //Automatic call leads to NullPointerException
        name = "JuniorClass";
      }
      public String toString(){
        return name;
      }
    }
  ]]>
      </example>
    </rule>

    <rule name="AccessorClassGenerationRule"
          message="Avoid instantiation through private constructors from outside of the constructor's class."
          class="net.sourceforge.pmd.rules.AccessorClassGenerationRule">
      <description>
      Instantiation by way of private constructors from outside of the constructor's class often causes the generation of an accessor.
      A factory method, or non-privitization of the constructor can eliminate this situation.
      The generated class file is actually an interface.  It gives the accessing class the ability to invoke a new hidden package
      scope constructor that takes the interface as a supplementary parameter.  This turns a private constructor effectively into
      one with package scope, though not visible to the naked eye.
      </description>
      <priority>3</priority>
      <example>
  <![CDATA[
  public class OuterClass {
    void method(){
      InnerClass ic = new InnerClass();//Causes generation of accessor
    }
    public class InnerClass {
      private InnerClass(){
      }
    }
  }

  public class OuterClass {
    void method(){
      InnerClass ic = new InnerClass();//OK, due to public constructor
    }
    public class InnerClass {
      public InnerClass(){
      }
    }
  }

  public class OuterClass {
    void method(){
      InnerClass ic = InnerClass.getInnerClass();//OK
    }
    public static class InnerClass {
      private InnerClass(){
      }
      private static InnerClass getInnerClass(){
        return new InnerClass();
      }
    }
  }

  public class OuterClass {
    private OuterClass(){
    }
    public class InnerClass {
      void method(){
        OuterClass oc = new OuterClass();//Causes generation of accessor
      }
    }
  }
  ]]>
      </example>
    </rule>



  <!-- Strings -->


    <rule name="AvoidDuplicateLiterals"
        message="The same String literal appears {0} times in this file."
        class="net.sourceforge.pmd.rules.AvoidDuplicateLiteralsRule">
    <description>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    </description>
        <priority>3</priority>
   <properties>
    <property name="threshold" value="4"/>
   </properties>
    <example>
<![CDATA[
public class Foo {
 private void bar() {
    buz("Howdy");
    buz("Howdy");
    buz("Howdy");
    buz("Howdy");
 }
 private void buz(String x) {}
}
]]>
    </example>
  </rule>

   <rule name="StringToString"
        message="Avoid calling toString() on String objects; this is unnecessary"
        class="net.sourceforge.pmd.rules.StringToStringRule">
    <description>
    Avoid calling toString() on String objects; this is unnecessary
    </description>
       <priority>3</priority>

    <example>
<![CDATA[
public class Foo {
 private String baz() {
  String bar = "howdy";
  return bar.toString();
 }
}
]]>
    </example>
    </rule>

   <rule name="StringInstantiation"
        message="Avoid instantiating String objects; this is usually unnecessary."
        class="net.sourceforge.pmd.rules.XPathRule">
    <description>
    Avoid instantiating String objects; this is usually unnecessary.
    </description>
       <properties>
           <property name="xpath">
               <value>
                   <![CDATA[
    //AllocationExpression[Name/@Image='String'][count(.//Expression) < 2][not(ArrayDimsAndInits)]
                    ]]>
               </value>
           </property>
       </properties>
       <priority>2</priority>

    <example>
<![CDATA[
public class Foo {
 private String bar = new String("bar"); // just do a String bar = "bar";
}
]]>
    </example>
    </rule>

          <!-- Coupling -->

    <rule name="CouplingBetweenObjectsRule"
        message="High amount of different objects as memebers donotes a high coupling"
        class="net.sourceforge.pmd.rules.CouplingBetweenObjectsRule">
    <description>
        Rule counts unique attributes, local variables and return types within an object. An amount
        higher than specified threshold can indicate a high degree of couping with in an object
    </description>
    <priority>3</priority>
    <properties>
      <property name="threshold" value="20"/>
    </properties>
    <example>
    <![CDATA[
      import com.Blah;
      import org.Bar;
      import org.Bardo;
      //
      public class Foo {
        private Blah var1;
        private Bar var2;
        //followed by many imports of unique objects

        void ObjectC doWork() {
           Bardo var55;
           ObjectA var44;
           ObjectZ var93;
           return something;
        }

        }
        ]]>
    </example>
  </rule>

  <rule name="ExcessiveImportsRule"
     message="A high number of imports can indicate a high degree of coupling within an object."
     class="net.sourceforge.pmd.rules.ExcessiveImportsRule">
     <description>
      A high number of imports can indicate a high degree of coupling within
      an object. Rule counts the number of unique imports and reports a violation
      if the count is above the user defined threshold.
  </description>
  <priority>3</priority>
  <properties>
      <property name="minimum" value="25"/>
  </properties>
  <example>
      <![CDATA[
      import blah.blah.Bardo;
      import blah.blah.Hardo;
      import blah.blah.Bar;
      import blah.net.ObjectA;
      //imports over some threshold
      public class Foo {
        public void doWork() {}
      }
      ]]>
  </example>

   </rule>


   <!-- Controversial -->

    <rule name="NullAssignment"
          message="Assigning an Object to null is a code smell.  Consider refactoring."
          class="net.sourceforge.pmd.rules.design.NullAssignmentRule">
      <description>
 Assigning a "null" to a variable (outside of its declaration) is usually in
 bad form.  Some times, the assignment is an indication that the programmer doesn't
 completely understand what is going on in the code.  NOTE: This sort of assignment
 may in rare cases be useful to encourage garbage collection.  If that's what you're using
 it for, by all means, disregard this rule :-)
      </description>
        <priority>3</priority>
      <example>
 <![CDATA[
 public class Foo {
   public void bar() {
     Object x = null; // This is OK.
     x = new Object();
     // Big, complex piece of code here.
     x = null; // This is BAD.
     // Big, complex piece of code here.
   }
 }

 ]]>
      </example>

    </rule>

    <rule name="UnusedModifier"
         message="Unused modifiers are, well, unused"
         class="net.sourceforge.pmd.rules.XPathRule">
     <description>
     Unused modifiers are, well, unused.
     </description>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
    //InterfaceDeclaration//MethodDeclaration[@Public='true' or @Abstract = 'true']
                    ]]>
                </value>
            </property>
        </properties>
        <priority>3</priority>
     <example>
 <![CDATA[
    public interface Foo {
     public abstract void bar(); // both abstract and public are ignored by the compiler
    }
 ]]>
     </example>
     </rule>

            <!-- JUnit -->


    <rule name="JUnitStaticSuite"
          message="You have a suite() method that is not both public and static, so JUnit won't call it to get your TestSuite.  Is that what you wanted to do?"
          class="net.sourceforge.pmd.rules.XPathRule">
      <description>
      The suite() method in a JUnit test needs to be both public and static.
      </description>
        <properties>
        <property name="xpath">
            <value>
                <![CDATA[
  //MethodDeclaration[not(@Static='true') or not(@Public='true')][MethodDeclarator/@Image='suite']
                ]]>
            </value>
        </property>
        </properties>
        <priority>3</priority>

      <example>
  <![CDATA[
  import junit.framework.*;
  public class Foo extends TestCase {
   public void suite() {} // oops, should be static
   private static void suite() {} // oops, should be public
  }
  ]]>
      </example>
      </rule>


  <rule name="JUnitSpelling"
        message="You may have misspelled a JUnit framework method (setUp or tearDown)"
        class="net.sourceforge.pmd.rules.XPathRule">
    <description>
    Some JUnit framework methods are easy to misspell.
    </description>
      <properties>
      <property name="xpath">
          <value>
              <![CDATA[
//MethodDeclarator[(not(@Image = 'setUp') and translate(@Image, 'SETuP', 'setUp') = 'setUp') or (not(@Image = 'tearDown') and translate(@Image, 'TEARdOWN', 'tearDown') = 'tearDown')][FormalParameters[count(*) = 0]]
              ]]>
          </value>
      </property>
      </properties>
      <priority>3</priority>

    <example>
<![CDATA[
import junit.framework.*;
public class Foo extends TestCase {
 public void setup() {} // oops, should be setUp
 public void TearDown() {} // oops, should be tearDown
}
]]>
    </example>
    </rule>

    <rule name="JUnitAssertionsShouldIncludeMessageRule"
          message="JUnit assertions should include a message"
          class="net.sourceforge.pmd.rules.junit.JUnitAssertionsShouldIncludeMessageRule">
      <description>
      JUnit assertions should include a message - i.e., use the three argument version of
          assertEquals(), not the two argument version.
      </description>
        <priority>3</priority>

      <example>
  <![CDATA[
  public class Foo extends TestCase {
    public void testSomething() {
        assertEquals("foo", "bar");
        // not good!  use the form:
        // assertEquals("Foo does not equals bar", "foo", "bar");
        // instead
    }
  }
  ]]>
      </example>
    </rule>


    <!--  Jar 1.3  -->


    <!-- StrictExpression -->


        <rule name="ExceptionTypeChecking"
         message="The catch clause shouldn't check the exception type - catch several exceptions instead"
          class="net.sourceforge.pmd.rules.strictexception.ExceptionTypeChecking">
      <description>
At some places Exception is caught and then a check with instanceof is performed.
This result in messy code. It's considered better to catch all the specific
exceptions instead.
      </description>
      <priority>3</priority>
      <example>
                <![CDATA[
SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
try {
    returnString = sdf.format(value);
} catch (Exception ex) {
    /* BAD STUFF !!!*/
    if (ex instanceof NumberFormatException) {
        System.out.println("NumberFormat exception!!!");
    }
    if (ex instanceof IllegalArgumentException) {
        System.out.println("illegal argument...!!!");
    }
}
                ]]>
      </example>
    </rule>

    <!-- Controversial -->

    <rule name="FinalizeShouldBeProtected"
          message="If you override finalize(), make it protected"
          class="net.sourceforge.pmd.rules.XPathRule">
      <description>
      If you override finalize(), make it protected.  Otherwise, subclasses
          may not called your implementation of finalize.
      </description>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
//MethodDeclaration[@Protected="false"]
  /MethodDeclarator[@Image="finalize"]
  [not(FormalParameters/*)]
                    ]]>
                </value>
            </property>
        </properties>
        <priority>3</priority>
      <example>
  <![CDATA[
public class Foo {
 public void finalize() {
  // do something
 }
}
  ]]>
      </example>
    </rule>



    <!-- Basic -->


    <rule name="UnnecessaryReturn"
          message="Avoid unnecessary return statements"
          class="net.sourceforge.pmd.rules.XPathRule">
      <description>
  Avoid unnecessary return statements
      </description>
      <properties>
          <property name="xpath">
              <value>
                  <![CDATA[
    //ResultType[
    parent::MethodDeclaration[Block/BlockStatement/Statement/ReturnStatement] and
    @Void='true'
    ]
                  ]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
  <![CDATA[
  // this is bad
  public void bar() {
      int x = 42;
      return;
  }
  ]]>
      </example>
    </rule>


    <rule name="EmptySynchronizedBlock"
          message="Avoid empty synchronized blocks"
          class="net.sourceforge.pmd.rules.XPathRule">
      <description>
  Avoid empty try blocks - what's the point?
      </description>
      <properties>
          <property name="xpath">
              <value>
                  <![CDATA[
    //SynchronizedStatement/Block[1][count(*) = 0]
                  ]]>
              </value>
          </property>
      </properties>
        <priority>3</priority>

      <example>
  <![CDATA[
  // this is bad
  public void bar() {
      synchronized (this) {}
  }
  ]]>
      </example>
    </rule>

    <!-- Design -->

    <rule name="FinalFieldCouldBeStatic"
          message="This final field could be made static"
          class="net.sourceforge.pmd.rules.XPathRule">
      <description>
      If a final field is assigned to a compile-time constant, it could be
          made static, thus saving overhead in each object
      </description>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
//FieldDeclaration
 [not (ancestor::InterfaceDeclaration)]
  [@Final='true' and @Static='false']
   /VariableDeclarator/VariableInitializer/Expression
    /ConditionalAndExpression/InstanceOfExpression
     /PrimaryExpression/PrimaryPrefix/Literal
                    ]]>
                </value>
            </property>
        </properties>
        <priority>3</priority>

      <example>
  <![CDATA[
public class Foo {
 public final int BAR = 42; // this could be static and save some space
}
  ]]>
      </example>
    </rule>


 <!-- <rule name="CloseConnectionRule"
        message="Ensures that Connection objects are always closed after use"
        class="net.sourceforge.pmd.rules.CloseConnectionRule">
    <description>
      Ensures that Connection objects are always closed after use
    </description>
    <priority>3</priority>
    <example>
      <![CDATA[
           public void foo() {
             Connection c = pool.getConnection();
             try {
               // do stuff
             } catch (SQLException ex) {
               // handle exception
             } finally {
               // oops, should close the connection using 'close'!
               // c.close();
             }
           }
  ]]>
    </example>
  </rule>     -->

</ruleset>
